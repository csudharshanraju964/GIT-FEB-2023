# Problem Statement
-TRACKING of CHANGES
-COLLABORATION
# SOLUTION
--VERSION/SOURCE CONTROL
# GIT
-GIT is a command line tool offers version control
# Application of Source Control
-Source Tree
-GITHUB Desktop
-Tortoise Git
-GitKraken
# GIT TOPICS
-Install VSCode
-Installing Git
-Creating a Repository
- Clone the REPO
-Configuring Git
-Checkout a Branch
-Status
-Adding Files to a Repository
-Committing Files to a Repository
-Adding a Remote Repository
-Pushing to a Repository
-Pull from a Repository
-Creating a Branch
-Switching Branches
-Deleting Branches
-Merging
-Stash
-Git Log
# Process
- Download GIT
- Create Github account
- SIGN IN
- CREATE REPO
- CREATE Empty folder in LOCAL
- git init--> CREATE Repo using git bash cmd (No need if you created through github UI)
- GIT Account setup using git config --global user.email "you@example.com" and git config --global user.name "Your Name" and git config --global user.password "your password"
- Git config command to show your Git username | Email using git config user.name and git config user.email
git config user.name
# DEVELOPER STEPS
- GIT clone using git clone username@host:/path/to/repository.git
- GIT command to know repo details git remote show origin
- GIT Check out using git checkout -b <BRANCHNAME> to create new branch
- GIT switch if branch already exist using git checkout <BRANCHNAME> to switch.
- GIT STATUS to check uncommited changes and Branch Name using  git status
- GIT commmand to check all available branch and shows current checked out branch using git branch
- GIT commmand to check all available branch and shows current checked out branch and all remote origin branches using git branch -a
- GIT commmand to update the branches/commits from remote to local using git fetch --all
- GIT command to check the difference between current and previous version using git diff
- GIT Staging using git add <FILENAME/FOLDERNAME> to stage the file
- GIT Unstaging using git reset HEAD <filepath/folderpath>
- Git Commit using  git commit -m <MESSAGE>
-GIT RESET for Undo Commit
--soft:-  option undo the last commit and preserve changes done to your files
git reset --soft HEAD~1
--hard:-  option undo the last commit and discard all changes in the working directory and index
git reset --hard HEAD~1
--mixed: option undo the last commit and keep changes in the working directory but NOT in the index
git reset --mixed HEAD~1
- GIT command to see all commit history using git reflog
- GIT Command to delete branch locally using git branch -d localBranchName
- GIT command to delete branch remotely git push origin --delete remoteBranchName
- GIT command to Add a remote REPO using  git remote add origin username@host:/path/to/repository.git
- GIT PULL from REMOTE REPO git pull origin master
- git branch --set-upstream-to=origin/<MAIN BRANCH NAME> feature/header Will establish connection from Remote to Local
- GIT PUSH to REMOTE REPO using git push origin <LOCAL BRANCH NAME>
-GIT create pull request like username@host:/path/to/repository/pull/<PULL REQUEST NUMBER>
- GIVE Access to collaborator username@host:/path/to/repository/settings and click on collaborator then add name.
- ONCE PR APPROVED run -git pull origin main to pull latest changes from ORIGN branch
- GIT command to save your changes safely in local without commiting using stash git stash save "cool work" git stash list git stash apply stash@{stash_index}
-GIT STASH is useful when you want to make changes to a file, but you don't want to commit those changes yet


//For practise
FORK Mayank's REPO `https://github.com/mayankrajendrat/React-Movie-Search`
CLONE in LOCAL
Run `npm i`
Open `https://www.omdbapi.com/` --> Get the API Key in EMAIL
Change the API Key in .env.Prod and .env.Dev file
Stage two files
Commit
Push to your own REPO
TODO--> Signup to render.com

FORK Mayank's REPO `https://github.com/mayankrajendrat/React-Movie-Search`
CLONE in LOCAL
Run `npm i`
Open `https://www.omdbapi.com/` --> Get the API Key in EMAIL
Change the API Key in .env.Prod and .env.Dev file
Stage two files
Commit
Push to your own REPO

RENDER DEPLOYMENT
 Signup to render.com
 Go to dashboard.render.com
 Create Static Site from top-left button
 Give Unique and Understandable URL
 then in Build commands --> `npm run build`
 and click on Deploy
 If in case of build error--> click on "Manual Deploy" button from top-left and select "Clear cache and deploy"

 REFERNCES:
https://github.com/Devinterview-io/git-interview-questions
https://github.com/FAQGURU/FAQGURU/blob/master/topics/en/git.md

//Status codes
1xxs – Informational responses: The server is thinking through the request.
2xxs – Success! The request was successfully completed and the server gave the browser the expected response.
3xxs – Redirection: You got redirected somewhere else. The request was received, but there’s a redirect of some kind.
4xxs – Client errors: Page not found. The site or page couldn’t be reached. (The request was made, but the page isn’t valid — this is an error on the website’s side of the conversation and often appears when a page doesn’t exist on the site.)
5xxs – Server errors: Failure. A valid request was made by the client but the server failed to complete the request.
Reference Link: https://http.dev/status#
TODO:
1) Reproduce 400 Error
2) Get Link to reproduce 500

//Mongodb Atlas 
MONGO DB ATLAST: https://www.freecodecamp.org/news/get-started-with-mongodb-atlas/

TODO:-
Fork Cloudinary Node Repo https://github.com/mayankrajendrat/Cloudinary-Media-Upload
Go to Cloudinary and Copy API Environment variable
Go To Render and Create new Web Service
Give GIT REPO that forked in Step-1
Build Command- npm install
Start Command- node server.js
Create Environment Variable CLOUDINARY_URL and Value that copied in Step-2
Submit

//References for File Upload
NODE REPO FOR FILE UPLOAD-FORK https://github.com/bezkoder/node-js-upload-image-mongodb
In Node- db.js update url like this mongodb+srv://root:<PASSWORD>@cluster0.jpu6uhr.mongodb.net/
    database: "images_db",
  imgBucket: "photos",
2. Run node src/server.js and it will run the node app in http://localhost:8080
REACT REPO FOR FILE UPLOAD-FORK https://github.com/bezkoder/react-hooks-multiple-file-upload
Run npm i and after that npm audit fix
Run npm start and it will run the React app in http://localhost:8081
https://www.bezkoder.com/react-multiple-files-upload/
https://www.bezkoder.com/node-js-upload-store-images-mongodb/



museo-repo----->https://github.com/abhaykamathm/museo.git
